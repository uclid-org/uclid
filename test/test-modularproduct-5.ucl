/* 

Testing For Type -- Records

Hyperproperties - Determinism, Transitivity

Description - Lexicographic Comparison of two Players accordind to their total scores in the span of two matches

*/

module main {

    type player = record {
        matchOneScore : integer,
        matchTwoScore : integer
    };

    procedure comparePlayers( playerOne: player,  playerTwo: player) returns (res: integer)
    ensures ( (res == 0) <==> (playerOne.matchOneScore + playerOne.matchTwoScore == playerTwo.matchOneScore + playerTwo.matchTwoScore));
    ensures ( (res == 1) <==> (playerOne.matchOneScore + playerOne.matchTwoScore > playerTwo.matchOneScore + playerTwo.matchTwoScore));
    ensures ( (res == -1) <==> (playerOne.matchOneScore + playerOne.matchTwoScore < playerTwo.matchOneScore + playerTwo.matchTwoScore));
    ensures ( (playerOne.1 == playerOne.2 && playerTwo.1 == playerTwo.2) ==> (res.1 == res.2));  //Determinism
    ensures ( (playerOne.1 == playerOne.3 && playerTwo.1 == playerOne.2 && playerTwo.2 == playerTwo.3 &&
                res.1 == res.2) ==> (res.3 == res.1));   //Transitivity
    {
        var playerOneScore, playerTwoScore : integer;

        assume(playerOne.matchOneScore >= 0);
        assume(playerOne.matchTwoScore >= 0);
        assume(playerTwo.matchOneScore >= 0);
        assume(playerTwo.matchTwoScore >= 0);
        playerOneScore = playerOne.matchOneScore + playerOne.matchTwoScore;
        playerTwoScore = playerTwo.matchOneScore + playerTwo.matchTwoScore;
        res = 0;
        if(playerOneScore > playerTwoScore) {
            res = 1;
        }
        if(playerOneScore < playerTwoScore) {
            res = -1;
        }

    }

    control 
    {
        v = verify(comparePlayers);
        check;
        v.print_cex(playerOne, playerTwo, res);
        print_results;
    }

}