
module main {
    // should pass
    datatype tree = | join(left: tree, right: tree) | leaf(node: integer);

     // flip tree
    procedure flip_tree(t: tree)
    returns (new_tree : tree)
    {
        var l : tree;
        var r : tree;
        l = t.left;
        r = t.right;
        new_tree = join(r, l);
    }

    var t1 : tree;
    var t2 : tree;


    init {
        t1 = join(leaf(1), leaf(1));
        t2 = leaf(1);
    }
    
    next {
        call (t1') = flip_tree(join(t1, t1));
        call (t2') = flip_tree(join(t2, t2));
    }

    invariant test : t1.left == t2;

    control {
        bmc(5);
        check;
        print_results;
    }
}
