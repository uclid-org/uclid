module main {
  type num = integer;
  type bit = boolean;
  type tup1 = {num, num, bit};
  type rec1 = record {a : num, b : num, c : bit };
  type rec2 = record { r : rec1, b : num };
  
  var st : tup1;
  var stp : tup1;
  var r1 : rec2;
  var r2 : rec2;
  var cnt : num;

  procedure add(n1 : num, n2 : num) returns (sum : num)  {
  	sum = n1 + n2;
  }
  procedure incr(n1 : num) returns (res : num) {
    call (res) = add(n1, 1);
  }
  procedure negb(v : bit) returns (res : bit) {
    res = !v;
  }
  procedure getf1(sta : tup1) returns (f1 : num) {
    f1 = sta._1;
  }
  procedure getf2(sta : tup1) returns (f2 : num) {
    f2 = sta._2;
  }
  procedure getf3(sta : tup1) returns (f3 : bit) {
    f3 = sta._3;
  }
  
  procedure get_f_a(r : rec1) returns (a : num) {
    a = r.a;
  }
  procedure get_f_b(r : rec1) returns (b : num) {
    b = r.b;
  }
  procedure get_f_c(r : rec1) returns (c : bit) {
    c = r.c;
  }
  
  procedure foo(stIn : tup1) returns (st1: tup1, st2: tup1) {
    var l1 : num;
    var l2 : num;
    var l3 : bit;
    
    call (l1) = getf1(stIn);
    call (l2) = getf2(stIn);
    call (l3) = getf3(stIn);
     
    call (st2._1) = incr(l1);
    call (st2._2) = add(l2, st2._1);
    call (st2._3) = negb(l3);
    st1 = {stIn._1 + 1, stIn._2 + stIn._1 + 1, !stIn._3};
  }
  
  procedure bar(r1 : rec2) returns (r2 : rec2, r3 : rec2) {
    var l1 : num;
    var l2 : num;
    var l3 : bit;
    var rec : rec1;
    
    call (l1) = get_f_a(r1);
    call (l2) = get_f_b(r1);
    call (l3) = get_f_c(r1);
    
    call (r2.r.a) = incr(l1);
    call (r2.r.b) = add(l2, r2.r.b);
    call (r2.r.c) = negb(l3);
    r2.b = (r1.r.a + 1);
    rec = { r1.r.a + 1, r1.r.b + r1.r.a + 1, !r1.r.c };
	r3 = { rec, r1.r.a + 1 };
  }
  
  init {
    st  = {0, 0, true};
    r1  = {{0, 0, true}, 0};
    stp = st;
    cnt = 0; 
  }
  
  next {
    call (st', stp') = foo(st);
    call (r1', r2') = bar(r1);
     
    cnt' = cnt + 1;
    
    assert (stp._1 == st._1);
    assert (stp._2 == st._2);
    assert (stp._3 == st._3);
    
    assert (st._1 == cnt);
    assert (st._1 <= st._2);
    
    assert (r1.r.a == r2.r.a);
    assert (r1.r.b == r2.r.b);
    assert (r1.r.c == r2.r.c);
    assert (r1.b == r2.b);
  }
  
  control {
    unroll (3);
    check;
    print_results;
  }
}
