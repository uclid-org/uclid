/*
https://github.com/marcelosousa/descartes/blob/master/benchmarks/pldi-16/stackoverflow/ColItem-true.java

Hyperproperties - Determinism, Transitivity, antisymmetric

Also checks tuple support.

Description -   Compares two container tuples lexicographically according to the tuple fields in the increasing order. 


*/

module main {

    //_1 -> cardSet, _2 ->CardRarity, _3 ->cardId, _4 ->cardType
    
    procedure compare(collectionItemOne: {integer, integer, integer, integer}, collectionItemTwo: {integer, integer, integer, integer}) 
    returns (res: integer) 
    requires (collectionItemOne._4 == 0 ||  collectionItemOne._4 == 1 );
    requires (collectionItemTwo._4 == 0 ||  collectionItemTwo._4 == 1 );
    ensures ( (res == 0) ==> (collectionItemOne._1 == collectionItemTwo._1 && collectionItemOne._2 == collectionItemTwo._2 &&
                collectionItemOne._3 == collectionItemTwo._3 && collectionItemOne._4 == collectionItemTwo._4));

    ensures ( (res == 1) ==> (collectionItemOne._1 > collectionItemTwo._1 || 
                                collectionItemOne._1 == collectionItemTwo._1 && collectionItemOne._2 < collectionItemTwo._2 ||
                                collectionItemOne._1 == collectionItemTwo._1 && collectionItemOne._2 == collectionItemTwo._2 && 
                                collectionItemOne._3 > collectionItemTwo._3 || 
                                collectionItemOne._1 == collectionItemTwo._1 && collectionItemOne._2 == collectionItemTwo._2 && 
                                collectionItemOne._3 == collectionItemTwo._3 && collectionItemOne._4 > collectionItemTwo._4));

    ensures ( (res == -1) ==> (collectionItemOne._1 < collectionItemTwo._1 ||
                                collectionItemOne._1 == collectionItemTwo._1 && collectionItemOne._2 > collectionItemTwo._2 ||
                                collectionItemOne._1 == collectionItemTwo._1 && collectionItemOne._2 == collectionItemTwo._2 && 
                                collectionItemOne._3 < collectionItemTwo._3 ||
                                collectionItemOne._1 == collectionItemTwo._1 && collectionItemOne._2 == collectionItemTwo._2 && 
                                collectionItemOne._3 == collectionItemTwo._3 && collectionItemOne._4 < collectionItemTwo._4));
    ensures ((collectionItemOne.1 == collectionItemOne.2 && collectionItemTwo.1 == collectionItemTwo.2) ==> (res.1 == res.2));
    ensures ( (collectionItemOne.1 == collectionItemOne.3 && collectionItemTwo.1 == collectionItemOne.2 && collectionItemTwo.2 == collectionItemTwo.3 && res.1 == res.2) ==> (res.3 == res.1)); //transitivity
    ensures ( (collectionItemOne.1 == collectionItemTwo.2 && collectionItemOne.2 == collectionItemTwo.1) ==> ((collectionItemOne.1 == collectionItemTwo.1) ==> ((res.1 == res.2) && (res.1 == 0)) &&
                                                ((collectionItemOne.1 != collectionItemTwo.1) ==> (res.1 == -res.2)))); //antisymmetric
    {
        res = 0;
        if( collectionItemOne != collectionItemTwo) {
            if(collectionItemOne._1 > collectionItemTwo._1) {
                res = 1;
            }
            else {
                if(collectionItemOne._1 < collectionItemTwo._1) {
                res = -1;
                }
                else {
                    if(collectionItemOne._2 < collectionItemTwo._2) {
                    res = 1;
                    }
                    else {
                        if(collectionItemOne._2 > collectionItemTwo._2) {
                        res = -1;
                        }
                        else {
                            if(collectionItemOne._3 > collectionItemTwo._3) {
                            res = 1;
                            }
                            else {
                                if(collectionItemOne._3 < collectionItemTwo._3) {
                                    res = -1;
                                }
                                else {
                                    res = collectionItemOne._4 - collectionItemTwo._4;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    control {
        v = verify(compare);
        check;
        v.print_cex(collectionItemOne, collectionItemTwo, res);
        print_results;
    }
}