module queue {
  output enq_ready : boolean;
  input enq_valid : boolean;
  input enq_bits : integer;
  input deq_ready : boolean;
  output deq_valid : boolean;
  output deq_bits : integer;
  var head_ptr : integer;
  var tail_ptr : integer;
  var data : [integer]integer;

  init {
    head_ptr = 0;
    tail_ptr = 0;
    enq_ready = false;
    deq_valid = false;
  }

  procedure modify_array ()
    modifies data;
  {
    if (enq_ready && enq_valid) {
      data[tail_ptr] = enq_bits;
    }
  }

  next {
    tail_ptr' = if (enq_ready && enq_valid) then tail_ptr + 1 else tail_ptr;
    head_ptr' = if (deq_ready && deq_valid) then head_ptr + 1 else head_ptr;
    enq_ready' = (tail_ptr' < head_ptr' + 10);
    deq_valid' = (head_ptr' < tail_ptr');
    call () = modify_array();
  }
}

module main {

  var enq_valid : boolean;
  var enq_bits : integer;
  var deq_ready : boolean;

  instance q : queue(enq_valid : (enq_valid),
                     enq_bits  : (enq_bits),
                     deq_ready : (deq_ready));

  init {
    enq_valid = false;
    deq_ready = false;
  }

  next {
    havoc enq_valid;
    havoc enq_bits;
    havoc deq_ready;
    next(q);
  }

  invariant f : (!(q.deq_ready && q.deq_valid));

  control {
    print_module;
    /*
    vobj = unroll(5);
    check;
    print_results;
    vobj.print_cex(enq_valid,
                   enq_bits,
                   q.enq_ready,
                   q.data,
                   q.head_ptr,
                   q.tail_ptr,
                   q.deq_valid,
                   deq_ready,
                   q.deq_bits);
      */
  }
}
