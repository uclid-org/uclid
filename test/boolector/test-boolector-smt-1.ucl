module main {
    
    /*
    type bv_t = bv3;
    define const0() : bv_t = 0bv3;
    define const1() : bv_t = 1bv3;
    define const_mid() : bv_t = 4bv3;
    define const_end() : bv_t = 7bv3;
    */
    // type res_t = record { valid : bv1, value : bv3 };

    type bv_t                 =   bv32;
    define const0() : bv_t    =  0bv32;
    define const1() : bv_t    =  1bv32;
    define const_mid() : bv_t =  8bv32;
    define const_end() : bv_t = 15bv32;

    const const_array : [bv_t]bv_t;
    var array : [bv_t]bv_t;
    var ptr1, ptr2 : bv_t;
    // var r1 : res_t;

    procedure blow_up_proc()
        modifies array, ptr1; //, r1;
    {
        // Equivalent to: if (array[ptr] == array[const_mid()]) then (forall (i:bv_t) :: array[i] == array[const_mid()])
        for (i : bv_t) in range(const0(), const_end()) {
            if (array[ptr1] == array[const_mid()]) {
                ptr1 = ptr1 + const1();
                array[ptr1] = array[ptr1 - const1()];
            }
        }
        // r1.valid = 1bv1;
        // r1.value = 3bv3;
    }

    init {
    	// r1.valid = 0bv1;
    	// r1.value = 0bv3;
        ptr1 = const0();
        array = const_array;
        assume (array[ptr1] == array[const_mid()]);
    }

    invariant test : (array[const0()] == array[const_mid()]);

    next {
        call blow_up_proc();
    }
    
    control {
        v = induction(1);
        check;
        print_results;
        v.print_cex();
    }
}
