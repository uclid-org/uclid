module cpu {
	var PC: bv16;
	var ACC: bv8;
	var B: bv8;
	var PSW: bv8;
	var SP: bv8;
	var DPL: bv8;
	var DPH: bv8;
	var P0: bv8;
	var P1: bv8;
	var P2: bv8;
	var P3: bv8;
	var PCON: bv8;
	var TCON: bv8;
	var TMOD: bv8;
	var TL0: bv8;
	var TH0: bv8;
	var TL1: bv8;
	var TH1: bv8;
	var SCON: bv8;
	var SBUF: bv8;
	var IE: bv8;
	var IP: bv8;
	var XRAM_DATA_OUT: bv8;
	var XRAM_ADDR: bv16;
	var IRAM: [bv8]bv8;
	var ROM: [bv16]bv8;
	type states_t = enum {pc_4A_stack_,pc_7A_stack_,pc_83_stack_,pc_13_stack_,pc_1C_stack_,pc_49_stack_,pc_53_stack_,pc_47_stack_,pc_77_stack_,pc_40_stack_,pc_4C_stack_,pc_71_stack_,pc_26_stack_,pc_39_stack_,pc_6E_stack_,pc_3_stack_,pc_32_stack_,pc_86_stack_,pc_4E_stack_,pc_51_stack_,pc_55_stack_,pc_1F_stack_,pc_91_stack_C,pc_65_stack_,pc_C_stack_,pc_7D_stack_,pc_2E_stack_,pc_3D_stack_,pc_21_stack_,pc_4F_stack_,pc_16_stack_,pc_59_stack_,pc_38_stack_,pc_E_stack_,pc_36_stack_,pc_1A_stack_,pc_88_stack_,pc_5F_stack_,pc_6B_stack_,pc_58_stack_,pc_6_stack_,pc_8B_stack_,pc_44_stack_,pc_28_stack_,pc_5D_stack_,pc_68_stack_,pc_2C_stack_,pc_62_stack_,pc_74_stack_,pc_5B_stack_,pc_3B_stack_,pc_24_stack_,pc_80_stack_,pc_30_stack_,pc_42_stack_,pc_48_stack_,pc_15_stack_,pc_10_stack_,pc_0_stack_,pc_3E_stack_,pc_29_stack_,pc_9_stack_,pc_18_stack_,pc_5A_stack_,pc_8E_stack_C,pc_27_stack_,pc_35_stack_,pc_25_stack_};
	var current_state: states_t;
init {
	PC = 0bv16;
	ACC = 0bv8;
	B = 0bv8;
	PSW = 0bv8;
	SP = 0bv8;
	DPL = 0bv8;
	DPH = 0bv8;
	P0 = 0bv8;
	P1 = 0bv8;
	P2 = 0bv8;
	P3 = 0bv8;
	PCON = 0bv8;
	TCON = 0bv8;
	TMOD = 0bv8;
	TL0 = 0bv8;
	TH0 = 0bv8;
	TL1 = 0bv8;
	TH1 = 0bv8;
	SCON = 0bv8;
	SBUF = 0bv8;
	IE = 0bv8;
	IP = 0bv8;
	XRAM_DATA_OUT = 0bv8;
	XRAM_ADDR = 0bv16;
	current_state = pc_0_stack_;}next {
	case	(current_state == pc_4A_stack_) : {
assume(PC == 74bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))] != 1bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[0bv8->0bv8];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_4C_stack_ || current_state' == pc_48_stack_);
}
	(current_state == pc_7A_stack_) : {
assume(PC == 122bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = ROM[(PC + 2bv16)];
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_7D_stack_);
}
	(current_state == pc_83_stack_) : {
assume(PC == 131bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = ROM[(PC + 2bv16)];
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_86_stack_);
}
	(current_state == pc_13_stack_) : {
assume(PC == 19bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_15_stack_);
}
	(current_state == pc_1C_stack_) : {
assume(PC == 28bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_1F_stack_);
}
	(current_state == pc_49_stack_) : {
assume(PC == 73bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))->(IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))] + 1bv8)];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_4A_stack_);
}
	(current_state == pc_53_stack_) : {
assume(PC == 83bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_55_stack_);
}
	(current_state == pc_47_stack_) : {
assume(PC == 71bv16);
		ACC' = 0bv8;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_48_stack_);
}
	(current_state == pc_77_stack_) : {
assume(PC == 119bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = ROM[(PC + 2bv16)];
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_7A_stack_);
}
	(current_state == pc_40_stack_) : {
assume(PC == 64bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((ACC == 0bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_4C_stack_ || current_state' == pc_42_stack_);
}
	(current_state == pc_4C_stack_) : {
assume(PC == 76bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_4E_stack_);
}
	(current_state == pc_71_stack_) : {
assume(PC == 113bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = ROM[(PC + 2bv16)];
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_74_stack_);
}
	(current_state == pc_26_stack_) : {
assume(PC == 38bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = (0bv8 ++ IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))]);
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = ACC;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_27_stack_);
}
	(current_state == pc_39_stack_) : {
assume(PC == 57bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))] != 1bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))->(IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))] - 1bv8)];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_3B_stack_ || current_state' == pc_38_stack_);
}
	(current_state == pc_6E_stack_) : {
assume(PC == 110bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = ROM[(PC + 2bv16)];
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_71_stack_);
}
	(current_state == pc_3_stack_) : {
assume(PC == 3bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (ROM[(PC + 1bv16)] ++ ROM[(PC + 2bv16)]);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_88_stack_);
}
	(current_state == pc_32_stack_) : {
assume(PC == 50bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = ROM[(PC + 2bv16)];
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_35_stack_);
}
	(current_state == pc_86_stack_) : {
assume(PC == 134bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = ((PC + 2bv16) + signext(ROM[(PC + 1bv16)]));
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_86_stack_);
}
	(current_state == pc_4E_stack_) : {
assume(PC == 78bv16);
		ACC' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))];
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_4F_stack_);
}
	(current_state == pc_51_stack_) : {
assume(PC == 81bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((ACC == 0bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_53_stack_ || current_state' == pc_5F_stack_);
}
	(current_state == pc_55_stack_) : {
assume(PC == 85bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_58_stack_);
}
	(current_state == pc_1F_stack_) : {
assume(PC == 31bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_21_stack_);
}
	(current_state == pc_91_stack_C) : {
assume(PC == 145bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (IRAM[SP] ++ IRAM[(SP - 1bv8)]);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = (SP - 2bv8);
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_C_stack_);
}
	(current_state == pc_65_stack_) : {
assume(PC == 101bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = ROM[(PC + 2bv16)];
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_68_stack_);
}
	(current_state == pc_C_stack_) : {
assume(PC == 12bv16);
		ACC' = DPL;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_E_stack_);
}
	(current_state == pc_7D_stack_) : {
assume(PC == 125bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = ROM[(PC + 2bv16)];
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_80_stack_);
}
	(current_state == pc_2E_stack_) : {
assume(PC == 46bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))] != 1bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))->(IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))] - 1bv8)];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_30_stack_ || current_state' == pc_24_stack_);
}
	(current_state == pc_3D_stack_) : {
assume(PC == 61bv16);
		ACC' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))];
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_3E_stack_);
}
	(current_state == pc_21_stack_) : {
assume(PC == 33bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = ROM[(PC + 2bv16)];
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_24_stack_);
}
	(current_state == pc_4F_stack_) : {
assume(PC == 79bv16);
		ACC' = (ACC | ROM[(PC + 1bv16)]);
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_51_stack_);
}
	(current_state == pc_16_stack_) : {
assume(PC == 22bv16);
		ACC' = (ACC | ROM[(PC + 1bv16)]);
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_18_stack_);
}
	(current_state == pc_59_stack_) : {
assume(PC == 89bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = (DPH ++ DPL);
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = ACC;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_5A_stack_);
}
	(current_state == pc_38_stack_) : {
assume(PC == 56bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))]->ACC];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_39_stack_);
}
	(current_state == pc_E_stack_) : {
assume(PC == 14bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((ACC == 0bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_10_stack_ || current_state' == pc_13_stack_);
}
	(current_state == pc_36_stack_) : {
assume(PC == 54bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_38_stack_);
}
	(current_state == pc_1A_stack_) : {
assume(PC == 26bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 2bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_1C_stack_);
}
	(current_state == pc_88_stack_) : {
assume(PC == 136bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = ROM[(PC + 2bv16)];
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_8B_stack_);
}
	(current_state == pc_5F_stack_) : {
assume(PC == 95bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (ROM[(PC + 1bv16)] ++ ROM[(PC + 2bv16)]);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_3_stack_);
}
	(current_state == pc_6B_stack_) : {
assume(PC == 107bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = ROM[(PC + 2bv16)];
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_6E_stack_);
}
	(current_state == pc_58_stack_) : {
assume(PC == 88bv16);
		ACC' = 0bv8;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_59_stack_);
}
	(current_state == pc_6_stack_) : {
assume(PC == 6bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = ROM[(PC + 2bv16)];
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_9_stack_);
}
	(current_state == pc_8B_stack_) : {
assume(PC == 139bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (ROM[(PC + 1bv16)] ++ ROM[(PC + 2bv16)]);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_62_stack_);
}
	(current_state == pc_44_stack_) : {
assume(PC == 68bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = ROM[(PC + 2bv16)];
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_47_stack_);
}
	(current_state == pc_28_stack_) : {
assume(PC == 40bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))->(IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))] + 1bv8)];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_29_stack_);
}
	(current_state == pc_5D_stack_) : {
assume(PC == 93bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))] != 1bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))->(IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))] - 1bv8)];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_59_stack_ || current_state' == pc_5F_stack_);
}
	(current_state == pc_68_stack_) : {
assume(PC == 104bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = ROM[(PC + 2bv16)];
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_6B_stack_);
}
	(current_state == pc_2C_stack_) : {
assume(PC == 44bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = (P2 + 1bv8);
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_2E_stack_);
}
	(current_state == pc_62_stack_) : {
assume(PC == 98bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = ROM[(PC + 2bv16)];
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_65_stack_);
}
	(current_state == pc_74_stack_) : {
assume(PC == 116bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = ROM[(PC + 2bv16)];
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_77_stack_);
}
	(current_state == pc_5B_stack_) : {
assume(PC == 91bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))] != 1bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))->(IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))] - 1bv8)];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_59_stack_ || current_state' == pc_5D_stack_);
}
	(current_state == pc_3B_stack_) : {
assume(PC == 59bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_3D_stack_);
}
	(current_state == pc_24_stack_) : {
assume(PC == 36bv16);
		ACC' = 0bv8;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_25_stack_);
}
	(current_state == pc_80_stack_) : {
assume(PC == 128bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = ROM[(PC + 2bv16)];
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_83_stack_);
}
	(current_state == pc_30_stack_) : {
assume(PC == 48bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((IRAM[(0bv3 ++ (extract(PSW) ++ 2bv3))] != 1bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 2bv3))->(IRAM[(0bv3 ++ (extract(PSW) ++ 2bv3))] - 1bv8)];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_32_stack_ || current_state' == pc_24_stack_);
}
	(current_state == pc_42_stack_) : {
assume(PC == 66bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))->ROM[(PC + 1bv16)]];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_44_stack_);
}
	(current_state == pc_48_stack_) : {
assume(PC == 72bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = (0bv8 ++ IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))]);
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = ACC;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_49_stack_);
}
	(current_state == pc_15_stack_) : {
assume(PC == 21bv16);
		ACC' = IRAM[(0bv3 ++ (extract(PSW) ++ 1bv3))];
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_16_stack_);
}
	(current_state == pc_10_stack_) : {
assume(PC == 16bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (ROM[(PC + 1bv16)] ++ ROM[(PC + 2bv16)]);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_3_stack_);
}
	(current_state == pc_0_stack_) : {
assume(PC == 0bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (ROM[(PC + 1bv16)] ++ ROM[(PC + 2bv16)]);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_6_stack_);
}
	(current_state == pc_3E_stack_) : {
assume(PC == 62bv16);
		ACC' = (ACC | ROM[(PC + 1bv16)]);
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 2bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_40_stack_);
}
	(current_state == pc_29_stack_) : {
assume(PC == 41bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((IRAM[(0bv3 ++ (extract(PSW) ++ 0bv3))] != ROM[(PC + 1bv16)])) then { ((PC + 3bv16) + signext(ROM[(PC + 2bv16)])) } else { (PC + 3bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = (0bv1 ++ extract(PSW));
assume(current_state' == pc_2E_stack_ || current_state' == pc_2C_stack_);
}
	(current_state == pc_9_stack_) : {
assume(PC == 9bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (ROM[(PC + 1bv16)] ++ ROM[(PC + 2bv16)]);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM[(SP + 1bv8)->extract((PC + 3bv16))][((SP + 1bv8) + 1bv8)->extract((PC + 3bv16))];
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = (SP + 2bv8);
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_8E_stack_C);
}
	(current_state == pc_18_stack_) : {
assume(PC == 24bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = if ((ACC == 0bv8)) then { ((PC + 2bv16) + signext(ROM[(PC + 1bv16)])) } else { (PC + 2bv16) };
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_1A_stack_ || current_state' == pc_35_stack_);
}
	(current_state == pc_5A_stack_) : {
assume(PC == 90bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_5B_stack_);
}
	(current_state == pc_8E_stack_C) : {
assume(PC == 142bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = ROM[(PC + 2bv16)];
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 3bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_91_stack_C);
}
	(current_state == pc_27_stack_) : {
assume(PC == 39bv16);
		ACC' = ACC;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = DPL;
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_28_stack_);
}
	(current_state == pc_35_stack_) : {
assume(PC == 53bv16);
		ACC' = 0bv8;
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_36_stack_);
}
	(current_state == pc_25_stack_) : {
assume(PC == 37bv16);
		ACC' = ROM[(zeroext(ACC) + (DPH ++ DPL))];
		PCON' = PCON;
		B' = B;
		TMOD' = TMOD;
		DPL' = extract((DPH ++ DPL));
		DPH' = DPH;
		TL1' = TL1;
		TL0' = TL0;
		ROM' = ROM;
		XRAM_ADDR' = 0bv16;
		TCON' = TCON;
		TH1' = TH1;
		TH0' = TH0;
		PC' = (PC + 1bv16);
		P2' = P2;
		P3' = P3;
		P0' = P0;
		P1' = P1;
		IRAM' = IRAM;
		IP' = IP;
		XRAM_DATA_OUT' = 0bv8;
		IE' = IE;
		SCON' = SCON;
		SP' = SP;
		SBUF' = SBUF;
		PSW' = PSW;
assume(current_state' == pc_26_stack_);
}
	esac}
}
