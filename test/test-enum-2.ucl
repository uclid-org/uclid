// Model of an ALU
module main
{
  type op_t = enum { add, sub, mov_imm, mov_out};
  type cmd_t = record { valid : boolean,  op : op_t};

  input cmd         : cmd_t;
  input r1, r2      : bv3;
  input immed       : bv8;
  output result     : bv8;

  var regs          : [bv3]bv8;
  var cnt           : bv8; // testing var.


  procedure set_regs_1()
  {
    // all registers initialized to one.
  }
  init {
    assume (forall (ri : bv3) :: regs[ri] == 1bv8);
    cnt = 1bv8;
  }

  procedure exec_command()
    modifies regs, result;
  {

    // temporary var to hold register values..
    var r1val : bv8;
    var r2val : bv8;

    if (cmd.valid) {
      r1val = regs[r1];
      r2val = regs[r2];
      case
        (cmd.op == add)      : { result = r1val + r2val; }
        (cmd.op == sub)      : { result = r1val - r2val; }
        (cmd.op == mov_imm)  : { result = immed; }
        (cmd.op == mov_out)  : { result = r1val; }
      esac
      regs[r1] = result;
    }
  }

  procedure next_sequential()
    modifies cnt, regs, result;
  {
    assume (cmd.valid);
    assume (cmd.op == add);
    call exec_command();
    // this code is only for testing the module.
    assume (r1 == 0bv3 && r2 == 0bv3);
    cnt = cnt + cnt;
  }

  next {
    call next_sequential();
    assert (cnt' == result');
  }

  control {
    f = unroll (5);
    check;
    print_results;
  }
}

