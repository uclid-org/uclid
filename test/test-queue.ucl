module common {
 type op_t = enum {push, pop, nop};

 const c0 : [integer]integer;
}


module queue
{
  type op_t = common.op_t;

  var contents : [integer]integer;
  var head, tail: integer;
  var inited : boolean;

  output first: integer;

  input op : op_t;
  input data : integer;

  define is_empty() : boolean = (head == tail);
  define in_queue(v : integer) : boolean = 
  	(exists (i : integer) :: (i >= head && i < tail && contents[i] == v));

  init {
    inited' = false;
    head' = 0;
    tail' = 0; 
    first' = contents[head];
  }

  procedure _push_q() returns (contentsP : [integer]integer, tailP : integer)
  {
    contentsP = contents;
    contentsP[tail] = data;
    tailP = tail + 1;
  }

  procedure _pop_q() returns (headP : integer)
  {
    headP = head+1;
  }

  next {
    inited' = true;
    first' = contents[head];
    case
	(op == push) : {
	  call (contents', tail') = _push_q();
    }
	(op == pop) : {
      if (!is_empty()) {
	    call(head') = _pop_q();
      }
	}
	(op == nop) : { } /* no change */
    esac;
  }

  const pushed_data : integer;
  invariant[LTL] head_le_tail : G(head <= tail);
  invariant[LTL] queue_inserts : G((inited && op == push && data == pushed_data && X(op != pop)) 
  									  ==> X(in_queue(pushed_data)));
  invariant[LTL] push_eventually_pops :
  	G(F(op == pop)) ==> // assume a pop will always happen.
  	G((inited && op == push && data == pushed_data) ==>
  	  F(op == pop && first == pushed_data));
  control {
    // print_module;
    v = bmc(5);
    check;
    print_results;
    v.print_cex(op, data, pushed_data, head, tail, contents);
  }
}

module main
{
  type op_t = common.op_t;

  var op : op_t;
  var data : integer;

  var step : integer;
  var head : integer;

  instance queue_i : queue(op : (op'), data : (data), first : (head));

  init {
    op' = nop;
    data' = 0; 
    step' = 0;
  }

  next {
    assert false;
    case
	  (step == 0) || (step == 1) : { op' = push; }
	  (step == 2) || (step == 3) : { op' = pop; }
    esac

    step' = step+1;
    data' = data+2;
    next(queue_i);

    if (step' == 2) {
      assert (head' == 1);
    }
    if (step' == 3) {
      assert (head' == 2);
    } 
  }

  control {
    unroll (5);
    check;
    print_results;
  }
}
