module common {
  type number_t;
  function zero() : number_t;
}

module beezee {
  type number_t = common.number_t;

  input z_prime : number_t;
  var b : number_t;
  var z : number_t;
  
  function le(x : number_t, y : number_t) : boolean;
  define le_b(a : number_t) : boolean = le(a, b);

  axiom (forall (z : number_t) :: (z == common.zero()) ==> le_b(z));

  init {
    z = common.zero();
  }
  next {
    if (le_b(z_prime)) {
      z' = z_prime;
    }
  }  
}

module main {
  type number_t = common.number_t;

  input z_p : number_t;

  instance bz1 : beezee(z_prime : (z_p));
  instance bz2 : beezee(z_prime : (z_p));

  init {
    assume (bz1.b == bz2.b);
  }

  next {
    next (bz1);
    next (bz2);
  }

  invariant z_eq : (bz1.z == bz2.z);
  invariant b_eq : (bz1.b == bz2.b);
  invariant z_le_b1 : (bz1.z == common.zero()) ==> beezee.le(bz1.z, bz1.b);
  invariant z_le_b2 : (bz2.z == common.zero()) ==> beezee.le(bz2.z, bz2.b);

  control {
    // print_module;
    v = induction;
    check;
    print_results;
  }
}
