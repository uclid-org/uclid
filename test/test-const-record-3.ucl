module main {

    type cacheline_t    = record { valid : boolean, value : bv32 };
    type cache_t        = record { numlines : integer, lines : [bv4]cacheline_t };

    var cacheline   : cacheline_t;
    var lineblock   : [bv4]cacheline_t;
    var cache       : cache_t;
    var lineaddr    : bv4;

    init {
        cacheline.valid = true;
        assume(forall (a : bv4) :: lineblock[a] == cacheline);
        cache = const_record(numlines := 100, lines := lineblock);
    }

    procedure write_line ()
        modifies cache, lineblock;
    {
        assume(cacheline.valid);
        lineblock[lineaddr] = cacheline;
        cache.lines = lineblock;
    }

    next {
        havoc cacheline;
        havoc lineaddr;
        call () = write_line();
    }

    invariant trivial : forall (a : bv4) :: cache.lines[a].valid;

    control {
        v = bmc(1);
        check;
        print_results;
        v.print_cex(cache);
    }
}
