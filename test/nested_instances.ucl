module main_func {

  type pc_t = enum {A, B, C};

  input enable : boolean;
  sharedvar timerCount : integer;

  var pc : pc_t;

  init {
    pc = A;
  }

// potentially we could have modeled the main program naturally
// without the use of an explicit PC -- next version of this model
// could do that
  next {
    if (enable) {
      case
        pc == A : {
                   if (timerCount == 0) { pc' = C; }
                   else { pc' = B; }
                }
        pc == B : { pc' = A; } 
        pc == C : { pc' = C; }
      esac
    }
  }

} // end module main_func


module ISR_func {
 type pc_t = enum {idle, D, E};

 input enable : boolean;
 sharedvar timerCount : integer;

 var pc : pc_t;

 output return_ISR : boolean;

 init {
   pc = idle;
   return_ISR = false;
 }

 next {
   if (enable) {
     case
       pc == idle : { pc' = D; return_ISR' = false; }
       pc == D && timerCount != 0 : { pc' = E; return_ISR' = false; }
       pc == D && timerCount == 0 : { pc' = idle; return_ISR' = true; }
       pc == E : { timerCount' = timerCount-1; pc' = idle; return_ISR' = true; }

     esac
   }
   else {
      return_ISR' = false;
   }

 }

/* This doesn't work as timerCount is a sharedvar
   defined in a higher level module.

 invariant pc_ISR: (pc == idle) <==> (return_ISR);

 control {
     unroll(5);
     check;
     print_results;
  }
*/
} // end module ISR_func


module Sys {

  type mode_t = enum {main_t, ISR_t};
  type ISR_func_pc_t = ISR_func.pc_t;

  input assert_intr : boolean;

// define and initialize timerCount here as a state variable
  var timerCount : integer;
  var mode : mode_t;
  var M_enable, I_enable: boolean;
  var return_ISR : boolean;

  // main and ISR functions composed synchronously
  instance main_f : main_func (enable : (M_enable), timerCount : (timerCount));
  instance ISR_f : ISR_func (enable : (I_enable), timerCount : (timerCount), return_ISR : (return_ISR));

  init {
    mode = main_t;
    timerCount = 2000;
    M_enable = true; // since mode == main_t initially
    I_enable = false;
  }

  next {
    next (main_f); 
    next (ISR_f);
    M_enable' = (mode == main_t);
    I_enable' = (mode == ISR_t);
    if (mode == main_t && assert_intr) { mode' = ISR_t; }
    else {
      if (mode == ISR_t && return_ISR) { mode' = main_t; }
    }
  }   

 invariant pc_ISR: (ISR_f.pc == idle) <==> (ISR_f.return_ISR);

 control {
     v = unroll(5);
     check;
     print_results;
     v.print_cex;

  }
}

module Env {
  output assert_intr : boolean;

  procedure havoc_assert_intr()
    modifies assert_intr;
  {
    havoc assert_intr;
  }

  init { call havoc_assert_intr(); }

  next { call havoc_assert_intr(); }
}

module main {

  type main_func_pc_t = main_func.pc_t;

// explicitly model interleaving async composition with an ND scheduler
  var turn : boolean;
  var assert_intr : boolean;

  instance Env_i : Env(assert_intr : (assert_intr));
  instance Sys_i : Sys(assert_intr : (assert_intr));

  procedure havoc_turn()
    modifies turn;
  {
    havoc turn;
  }

  init { call havoc_turn(); }

  next { 
    if (turn) { next (Sys_i); } else { next (Env_i); }
    call havoc_turn(); 
  }

  property[LTL] reached_C :  G((Sys_i.main_f.pc == A) || (Sys_i.main_f.pc == B));

  control {
    // print_module;
    // vobj = bmc[reached_C] (2);
    // unroll(5);
    // check;
    // print_results;
  }
}
