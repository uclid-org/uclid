(set-logic ALL)
(synth-fun inv-fn ((var_i (_ BitVec 1)) (var_x (Array (_ BitVec 1) (_ BitVec 32)))) Bool)
(declare-var var_x (Array (_ BitVec 1) (_ BitVec 32)))
(declare-var var_x! (Array (_ BitVec 1) (_ BitVec 32)))
(declare-var var_i (_ BitVec 1))
(declare-var var_i! (_ BitVec 1))
(define-fun init-fn ((var_i (_ BitVec 1)) (var_x (Array (_ BitVec 1) (_ BitVec 32)))) Bool (= var_x (store (store var_x (_ bv0 1) (_ bv10 32)) (_ bv1 1) (_ bv10 32))))
(define-fun trans-fn ((var_i (_ BitVec 1)) (var_x (Array (_ BitVec 1) (_ BitVec 32))) (var_i! (_ BitVec 1)) (var_x! (Array (_ BitVec 1) (_ BitVec 32)))) Bool (and (= var_x! (store (store var_x (_ bv0 1) (bvadd (select var_x (_ bv0 1)) (_ bv1 32))) (_ bv1 1) (bvadd (select (store var_x (_ bv0 1) (bvadd (select var_x (_ bv0 1)) (_ bv1 32))) (_ bv1 1)) (_ bv1 32)))) (= var_i! var_i)))
(define-fun post-fn ((var_i (_ BitVec 1)) (var_x (Array (_ BitVec 1) (_ BitVec 32)))) Bool (forall ((var_i (BitVec 1)))  (bvsge (select var_x var_i) (_ bv10 32))))
(constraint (=> (init-fn var_i var_x) (inv-fn var_i var_x)))
(constraint (=> (and (inv-fn var_i var_x) (trans-fn var_i var_x var_i! var_x!)) (inv-fn var_i! var_x!)))
(constraint (=> (inv-fn var_i var_x) (post-fn var_i var_x)))
(check-synth)
