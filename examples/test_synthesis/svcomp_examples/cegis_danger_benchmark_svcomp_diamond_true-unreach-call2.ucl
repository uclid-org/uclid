/*int main(void) {
  unsigned int x=0;
  unsigned int y;

  while (x < 99) {
    if (y % 2 == 0bv32) x += 2;
    else x++;

    if (y % 2 == 0bv32) x += 2;
    else x -= 2;

    if (y % 2 == 0bv32) x += 2;
    else x += 2;

    if (y % 2 == 0bv32) x += 2;
    else x -= 2;

    if (y % 2 == 0bv32) x += 2;
    else x += 2;

    if (y % 2 == 0bv32) x += 2;
    else x -= 4;

    if (y % 2 == 0bv32) x += 2;
    else x += 4;

    if (y % 2 == 0bv32) x += 2;
    else x += 2;

    if (y % 2 == 0bv32) x += 2;
    else x -= 4;

    if (y % 2 == 0bv32) x += 2;
    else x -= 4;
  }

  __CPROVER_assert((x % 2) == (y % 2), "A");
  return 0;
}*/

module main
{
  var x: bv32;
  var y: bv32;


 init
 {
   x=0bv32;
 }

 next
 {
   if(x < 99bv32)
   { call update();}
 }

procedure update()
    modifies y,x;
    {
    if ( (y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x+1bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x-2bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x+2bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x-2bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x+2bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x-4bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x+4bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x+2bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x-4bv32;}

    if ((y % 2bv32) == 0bv32) {x=x+2bv32;}
    else {x=x-4bv32;}

    }

     invariant my_invariant: ((x%2bv32)==(y % 2bv32)) || (x < 99bv32);

  synthesis function h(x : bv32, y : bv32) : boolean;
  property hole: h(x, y);

  control {
    induction;
    check;
    print_results;
  }
 }
    
